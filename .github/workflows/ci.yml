name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.7', '3.8', '3.9', '3.10', '3.11']
        exclude:
          # Reduce build matrix for efficiency
          - os: macos-latest
            python-version: '3.7'
          - os: windows-latest
            python-version: '3.7'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libxml2-dev libxslt1-dev python3-dev

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install libxml2 libxslt

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black mypy

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 webcrawler/ utils/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 webcrawler/ utils/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Check formatting with black
      run: |
        black --check webcrawler/ utils/ tests/ *.py

    - name: Type check with mypy
      run: |
        mypy webcrawler/ utils/ --ignore-missing-imports

    - name: Test with pytest
      run: |
        python test_setup.py
        python tests/test_document_processor.py

    - name: Test demo crawler
      run: |
        timeout 30 python demo_crawler.py || true

    - name: Generate coverage report
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.9'
      run: |
        pip install pytest-cov
        pytest tests/ --cov=webcrawler --cov=utils --cov-report=xml

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.9'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-packages
        path: dist/

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Security scan with bandit
      run: |
        bandit -r webcrawler/ utils/ -f json -o bandit-report.json || true

    - name: Dependency vulnerability scan
      run: |
        safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  integration-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run integration tests
      run: |
        # Test basic crawling functionality
        timeout 60 python run_crawler.py --start-urls "https://httpbin.org" --max-depth 1 || true
        
        # Verify output files were created
        ls -la data/
        
        # Test with multiple configurations
        timeout 30 python run_crawler.py --start-urls "https://httpbin.org/html" --max-depth 1 --delay 2 || true

    - name: Upload crawl results
      uses: actions/upload-artifact@v3
      with:
        name: integration-test-results
        path: data/